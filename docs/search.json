[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "A blog about deep learning, AI, tech and data ethics."
  },
  {
    "objectID": "posts/how-do-i-know-i-have-enough-data/index.html",
    "href": "posts/how-do-i-know-i-have-enough-data/index.html",
    "title": "How Do I Know If I Have Enough Data?",
    "section": "",
    "text": "In the world of deep learning, a common question that arises is, ‚ÄúHow do I know if I have enough data?‚Äù This is a crucial consideration because the quantity and quality of your data can significantly impact the performance of your model. However, knowing whether your dataset is sufficient isn‚Äôt always straightforward and requires a combination of practice and experimentation."
  },
  {
    "objectID": "posts/how-do-i-know-i-have-enough-data/index.html#key-questions-to-ask",
    "href": "posts/how-do-i-know-i-have-enough-data/index.html#key-questions-to-ask",
    "title": "How Do I Know If I Have Enough Data?",
    "section": "Key Questions to Ask:",
    "text": "Key Questions to Ask:\n\nIs the model overfitting or underfitting? Overfitting might indicate that the model is too complex for the available data. Underfitting suggests the model may be too simple or not trained enough.\nHow does the model perform on validation or test data? Consistent performance across training and validation sets can indicate sufficient data."
  },
  {
    "objectID": "posts/how-do-i-know-i-have-enough-data/index.html#you-cant-know-if-you-have-enough-until-you-train-the-model",
    "href": "posts/how-do-i-know-i-have-enough-data/index.html#you-cant-know-if-you-have-enough-until-you-train-the-model",
    "title": "How Do I Know If I Have Enough Data?",
    "section": "You Can‚Äôt Know If You Have Enough Until You Train the Model",
    "text": "You Can‚Äôt Know If You Have Enough Until You Train the Model\nThe truth is, you can‚Äôt really know if you have enough data until you actually train the model. The process of training helps reveal whether your dataset is capturing the necessary features and patterns to achieve your desired level of performance. You may find that even a small dataset works well with certain problems, especially with the right techniques, like transfer learning or data augmentation."
  },
  {
    "objectID": "posts/how-do-i-know-i-have-enough-data/index.html#advantages-of-training-early",
    "href": "posts/how-do-i-know-i-have-enough-data/index.html#advantages-of-training-early",
    "title": "How Do I Know If I Have Enough Data?",
    "section": "Advantages of Training Early:",
    "text": "Advantages of Training Early:\n\nExperimentation: Training early enables experimentation with different models and hyperparameters, helping us to learn what works best for our specific problem.\nUnderstanding Data Needs: Initial training results can inform whether more data is required or if our efforts should focus on optimizing other aspects of the model.\nAvoiding Wasted Effort: We might find that a simple model trained on limited data achieves acceptable results, saving time and resources!\n\nThat being said, the great thing is that there are techniques available to maximise our data, ensuring we can build effective models even with limited datasets (yay!) - Techniques such as data augmentation, transfer learning, and regularization can significantly enhance model performance."
  },
  {
    "objectID": "posts/how-do-i-know-i-have-enough-data/index.html#techniques-to-maximise-our-data-under-constraint-without-enough-data-for-instance",
    "href": "posts/how-do-i-know-i-have-enough-data/index.html#techniques-to-maximise-our-data-under-constraint-without-enough-data-for-instance",
    "title": "How Do I Know If I Have Enough Data?",
    "section": "Techniques to maximise our data under constraint (without enough data for instance):",
    "text": "Techniques to maximise our data under constraint (without enough data for instance):\nThe great thing about deep learning is that there are numerous techniques to maximise our data, ensuring we can build effective models even with limited datasets (yay!) - Techniques such as data augmentation, transfer learning, and regularization can significantly enhance model performance.\nStay tuned for a separate article that will delve into these techniques, providing strategies and tips on how to make the most of our available data and improve model performance even with constraints.\n\n\nKey takeaway: By training our model early and often, we can gain valuable insights into our data‚Äôs sufficiency and learn how to make informed decisions about data collection and preprocessing. This approach not only helps build better models but also makes our development process more agile and responsive.\nStay curious! Manon"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome and Why A Blog?",
    "section": "",
    "text": "I hear a lot that blogs are dead.\nMaybe.\nBut I love blogs! So I decided to start one anyways to document my learning journey with deep learning and AI.\nI am learning the fundamentals, and on day two of the fastai course from Jeremy Howard I was able to train my first model to classify bears.\nHOW COOL IS THAT???\nStay curious, Manon"
  },
  {
    "objectID": "posts/fit-function-into-data/index.html",
    "href": "posts/fit-function-into-data/index.html",
    "title": "Fitting a Function to Data in Neural Networks",
    "section": "",
    "text": "In the context of neural networks, ‚Äúfitting a function to data‚Äù refers to the process of training the model to learn the underlying patterns, relationships, or mappings between input data and the desired output. Let‚Äôs delve into what this means, why it‚Äôs essential, and how it is achieved in practice."
  },
  {
    "objectID": "posts/fit-function-into-data/index.html#what-is-a-function",
    "href": "posts/fit-function-into-data/index.html#what-is-a-function",
    "title": "Fitting a Function to Data in Neural Networks",
    "section": "What is a Function?",
    "text": "What is a Function?\nA function in mathematics is a relation between a set of inputs and a set of possible outputs. In the context of machine learning:\nInput (X): The data we provide to the model (e.g., images, text, numerical features). Output (Y): The prediction or classification that the model generates (e.g., labels, regression values). The neural network acts as a parameterized function ùëì ( ùëã , ùúÉ ) f(X,Œ∏) where:\nùëã X is the input data. ùúÉ Œ∏ are the parameters (weights and biases). ùëì f is the model that maps inputs to outputs."
  },
  {
    "objectID": "posts/fit-function-into-data/index.html#why-do-we-fit-a-function-into-data",
    "href": "posts/fit-function-into-data/index.html#why-do-we-fit-a-function-into-data",
    "title": "Fitting a Function to Data in Neural Networks",
    "section": "Why Do We Fit a Function into Data?",
    "text": "Why Do We Fit a Function into Data?\n\nLearning Patterns and Relationships Discovering Hidden Structures: Data often contains complex patterns or relationships that are not easily discernible. By fitting a function, a neural network can learn these structures and make sense of the data. Feature Extraction: Neural networks can automatically learn and extract relevant features from raw data, reducing the need for manual feature engineering.\nMaking Predictions Generalization: Once trained, the network should generalize well to unseen data, making accurate predictions based on the learned patterns. Decision Making: Predictions can drive decision-making processes in various applications like self-driving cars, medical diagnosis, etc.\nOptimization and Efficiency Loss Minimization: Fitting involves minimizing a loss function that quantifies the difference between predicted and actual values. The goal is to find parameter values that yield the lowest possible loss. Efficient Representation: Neural networks can efficiently represent complex functions with relatively few parameters compared to traditional models, making them suitable for high-dimensional data."
  },
  {
    "objectID": "posts/fit-function-into-data/index.html#how-does-fitting-work",
    "href": "posts/fit-function-into-data/index.html#how-does-fitting-work",
    "title": "Fitting a Function to Data in Neural Networks",
    "section": "How Does Fitting Work?",
    "text": "How Does Fitting Work?\nThe process of fitting a function to data in a neural network involves several key steps:\n\nInitialization Parameter Initialization: The weights and biases of the network are initialized, often with small random values or specific strategies like Xavier or He initialization.\nForward Pass Data Propagation: The input data is passed through the network layers, and transformations are applied based on the current parameter values to produce an output. Output Prediction: The network generates predictions for the given input data.\nLoss Calculation Define Loss Function: A loss function (e.g., mean squared error, cross-entropy) measures the difference between predicted and actual target values. Calculate Loss: Compute the loss for the given predictions.\nBackward Pass (Backpropagation) Gradient Calculation: Using backpropagation, compute the gradients of the loss with respect to each parameter. This involves applying the chain rule to propagate errors backward through the network. Parameter Update: Update the parameters using optimization algorithms like stochastic gradient descent (SGD) or Adam. The parameters are adjusted in the direction that minimizes the loss.\nIterative Process Epochs and Batches: The process is repeated over multiple iterations (epochs) and for different subsets of data (batches) to refine the parameter values continually. Convergence: The training process aims to converge to a set of parameters that minimize the loss function, achieving a good fit to the training data."
  },
  {
    "objectID": "posts/fit-function-into-data/index.html#why-not-use-traditional-models",
    "href": "posts/fit-function-into-data/index.html#why-not-use-traditional-models",
    "title": "Fitting a Function to Data in Neural Networks",
    "section": "Why Not Use Traditional Models?",
    "text": "Why Not Use Traditional Models?\nTraditional models, such as linear regression, fit simple functions to data, which might be insufficient for complex tasks where:\nNon-linearity: Data relationships are non-linear and require sophisticated functions to capture. High Dimensionality: Inputs are high-dimensional (e.g., images, audio) and need complex architectures. Complex Patterns: Patterns involve intricate interactions that simple models cannot capture effectively. Neural networks excel in these scenarios due to their ability to approximate complex functions."
  },
  {
    "objectID": "posts/fit-function-into-data/index.html#conclusion",
    "href": "posts/fit-function-into-data/index.html#conclusion",
    "title": "Fitting a Function to Data in Neural Networks",
    "section": "Conclusion",
    "text": "Conclusion\nFitting a function to data in neural networks is about learning the optimal parameter values that allow the model to capture underlying patterns and make accurate predictions. This process is central to machine learning, enabling models to generalize from examples and solve real-world problems effectively."
  },
  {
    "objectID": "posts/build-first-model/index.html",
    "href": "posts/build-first-model/index.html",
    "title": "Build your first Deep Learning app",
    "section": "",
    "text": "I made my first ML-powered app in day two of the ‚ÄúDeep Learning Course for Coders‚Äù from Jeremy Howard of fastai, my new hero haha.\nTo give you some context, I am fullstack developer with no prior experience in data science and deep learning. I am just interested in learning how deep learning can solve tangible problems, and how teams and people can make ethical decisions based on data.\nToday I am giving back to the community, so we are going to make an image classification model that classifies bears, using fastai, HuggingFace Spaces and Gradio. It‚Äôs so inspiring for me to see that in a few lines of code I was able to have something sharable! (You can see it here!)"
  },
  {
    "objectID": "posts/build-first-model/index.html#improving-the-model",
    "href": "posts/build-first-model/index.html#improving-the-model",
    "title": "Build your first Deep Learning app",
    "section": "Improving the model",
    "text": "Improving the model"
  },
  {
    "objectID": "posts/build-first-model/index.html#downloading-the-model",
    "href": "posts/build-first-model/index.html#downloading-the-model",
    "title": "Build your first Deep Learning app",
    "section": "Downloading the model",
    "text": "Downloading the model"
  },
  {
    "objectID": "posts/build-first-model/index.html#gradio-template",
    "href": "posts/build-first-model/index.html#gradio-template",
    "title": "Build your first Deep Learning app",
    "section": "Gradio template",
    "text": "Gradio template"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "majabig",
    "section": "",
    "text": "How Do I Know If I Have Enough Data?\n\n\n\n\n\n\ntip\n\n\ndeep learning\n\n\ndata processing\n\n\n\n\n\n\n\n\n\nAug 10, 2024\n\n\nManon Jacquin\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is a neural net?\n\n\n\n\n\n\nbeginner\n\n\ndeep learning\n\n\n\n\n\n\n\n\n\nAug 7, 2024\n\n\nManon Jacquin\n\n\n\n\n\n\n\n\n\n\n\n\nBuild your first Deep Learning app\n\n\n\n\n\n\ntutorial\n\n\nbeginner\n\n\ndeep learning\n\n\n\n\n\n\n\n\n\nJul 10, 2024\n\n\nManon Jacquin\n\n\n\n\n\n\n\n\n\n\n\n\nFitting a Function to Data in Neural Networks\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 7, 2024\n\n\nManon Jacquin\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome and Why A Blog?\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 7, 2024\n\n\nManon Jacquin\n\n\n\n\n\n\nNo matching items"
  }
]